var ols=[{caption:"Clase 08 | Git & Github ",page:"2",url:"",level:"1",children:[{caption:"Temario: ",page:"2",url:"",level:"2",children:[]}]},{caption:" ",page:"2",url:"",level:"1",children:[]},{caption:" ",page:"2",url:"",level:"1",children:[]},{caption:" ",page:"2",url:"",level:"1",children:[]},{caption:" ",page:"2",url:"",level:"1",children:[]},{caption:" ",page:"2",url:"",level:"1",children:[]},{caption:"1. Git y GitHub ",page:"3",url:"",level:"1",children:[{caption:"¿Qué es Git? ",page:"3",url:"",level:"2",children:[]},{caption:"Git es un sistema de control de versiones. En pocas palabras: es una herramienta que te permite ir guardando versiones de tu proyecto. Si alguna vez rompiste todo el código y deseaste volver a una versión anterior, ¡Git es la solución! Gracias a esta herramienta podés \"viajar en el tiempo\" y recuperar una versión anterior del proyecto. Y no solo eso, también te permite trabajar en equipo sin “pisarte” con otras personas que desarrollen el mismo proyecto. ",page:"3",url:"",level:"2",children:[]},{caption:" ",page:"3",url:"",level:"2",children:[]},{caption:"¿Qué es GitHub? ",page:"3",url:"",level:"2",children:[]},{caption:"GitHub es, de alguna forma, “el hermano” de Git, pero con una diferencia: opera en la nube. Es una plataforma donde podés subir tu código y compartirlo con otras personas desarrolladoras o con el mundo. En este espacio virtual podés colaborar en proyectos, subir cambios y ver el progreso que va teniendo tu proyecto a lo largo del tiempo. ",page:"3",url:"",level:"2",children:[]},{caption:"GitHub es básicamente un lugar donde guardás tus repositorios (que son como carpetas de proyectos con historial) para poder trabajar con más gente o desde cualquier lugar. ",page:"3",url:"",level:"2",children:[]},{caption:"Instalación y Configuración de Git ",page:"3",url:"",level:"2",children:[{caption:"Instalación ",page:"3",url:"",level:"3",children:[]}]},{caption:"●​Windows: Descargá el instalador desde Git SCM y seguí las instrucciones. ",page:"3",url:"",level:"2",children:[]},{caption:"Mac: Si tenés Homebrew, podés instalarlo directamente desde la terminal con:​​brew install git ",page:"3",url:"",level:"2",children:[]},{caption:"Linux: Para distribuciones basadas en Debian, como Ubuntu, escribí en la terminal:​​sudo apt-get install git ",page:"3",url:"",level:"2",children:[{caption:" ",page:"3",url:"",level:"3",children:[]},{caption:" ",page:"3",url:"",level:"3",children:[]},{caption:"Configuración ",page:"4",url:"",level:"3",children:[]}]},{caption:"Lo primero que necesitás después de instalar Git es configurarlo. Esto lo hacés desde la terminal o consola. ¡Veamos cómo! ",page:"4",url:"",level:"2",children:[]},{caption:"git config --global user.name \"Tu Nombre\" ",page:"4",url:"",level:"2",children:[]},{caption:"git config --global user.email \"tuemail@ejemplo.com\" ",page:"4",url:"",level:"2",children:[]},{caption:"Esto le dice a Git cuál es tu nombre y tu email para que puedas hacer commits (que son como \"guardados\" o \"versiones\"). ",page:"4",url:"",level:"2",children:[]},{caption:"Conceptos Clave en Git ",page:"4",url:"",level:"2",children:[]},{caption:"●​Repositorio (o “Repo”): Se trata del espacio donde va a estar guardado todo tu proyecto, junto con su historial de cambios. Puede ser un repositorio local (almacenado en tu computadora) o remoto (en GitHub). ",page:"4",url:"",level:"2",children:[]},{caption:"●​Branch (o “Rama”): Imaginá que querés probar algo nuevo en tu código, pero sin romper lo que ya funciona. Para eso hacés una \"rama\". Podés trabajar tranquilamente y, si te gusta el resultado, lo unís a la rama principal (generalmente llamada main o master). ",page:"4",url:"",level:"2",children:[]},{caption:"●​Commit: Un commit guardará el estado actual de tu proyecto. Cada vez que hacés un commit de alguna forma estás “sacando una foto” de tu proyecto, pero más importante: estás guardando los cambios hechos hasta ese momento. ",page:"4",url:"",level:"2",children:[]},{caption:"●​Merge (o “fusión”): Es el proceso de unir dos ramas. Después de probar algo nuevo en una rama, podés unirlo al código principal mediante un merge. ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:" ",page:"4",url:"",level:"2",children:[]},{caption:"Comandos básicos de Git ",page:"5",url:"",level:"2",children:[]},{caption:" ",page:"5",url:"",level:"2",children:[]},{caption:"git init: Inicializa un nuevo repositorio en la carpeta actual. Esto crea un .git, que es la carpeta donde se guardan todos los cambios que vas a realizar.​​git init ",page:"5",url:"",level:"2",children:[]},{caption:"git add: Este comando selecciona los archivos que querés \"guardar\". Podés agregar archivos específicos o todo de una, con:​​git add . ",page:"5",url:"",level:"2",children:[]},{caption:"git commit: Crea un \"snapshot\" de los archivos agregados y guarda un mensaje descriptivo de los cambios.​​git commit -m \"Mensaje descriptivo de los cambios\" ",page:"5",url:"",level:"2",children:[]},{caption:"git push: Sube los commits de tu repositorio local a uno remoto en GitHub.​​git push origin main ",page:"5",url:"",level:"2",children:[]}]},{caption:"Crear ramas y trabajar con ellas en Git. ",page:"6",url:"",level:"1",children:[{caption:"¿Qué es una Rama en Git? ",page:"6",url:"",level:"2",children:[]},{caption:" ",page:"6",url:"",level:"2",children:[]},{caption:" ",page:"6",url:"",level:"2",children:[]},{caption:" ",page:"6",url:"",level:"2",children:[]},{caption:" ",page:"6",url:"",level:"2",children:[]},{caption:" ",page:"6",url:"",level:"2",children:[]},{caption:"Ejemplo: Crear y trabajar con ramas ",page:"7",url:"",level:"2",children:[]},{caption:" ",page:"8",url:"",level:"2",children:[]},{caption:" ",page:"8",url:"",level:"2",children:[]},{caption:" ",page:"8",url:"",level:"2",children:[]},{caption:" ",page:"8",url:"",level:"2",children:[]},{caption:"Flujo de Trabajo con Ramas: ",page:"9",url:"",level:"2",children:[]},{caption:"Flujo de trabajo con Git y GitHub. ",page:"9",url:"",level:"2",children:[]},{caption:"Crear un repositorio en GitHub: Vas a GitHub, creás un nuevo repositorio y le ponés un nombre descriptivo. ",page:"9",url:"",level:"2",children:[]},{caption:"Vincular repositorio local con GitHub: Abrí tu terminal y escribí este comando para vincular tu repositorio local con el que creaste en GitHub:​​git remote add origin https://github.com/tu-usuario/proyecto.git ",page:"9",url:"",level:"2",children:[]},{caption:"Subir cambios a GitHub: Después de hacer algunos cambios y hacer commits, podés subirlos a GitHub con el comando:​​git push -u origin main ",page:"10",url:"",level:"2",children:[]},{caption:"Resolución de conflictos en Git ",page:"10",url:"",level:"2",children:[]},{caption:"Los conflictos en Git surgen cuando dos personas (o vos en dos ramas diferentes) modifican las mismas líneas de código. Git no sabe cuál de las dos versiones debe mantener, así que te pide que lo resuelvas manualmente. ",page:"10",url:"",level:"2",children:[{caption:"Pasos para resolver un conflicto: ",page:"10",url:"",level:"3",children:[]}]},{caption:"Identificar el conflicto:​Después de intentar hacer un merge, si hay un conflicto, Git te lo va a avisar. Podés ver los archivos en conflicto ejecutando:​​git status ",page:"10",url:"",level:"2",children:[]},{caption:"Los archivos en conflicto aparecerán en rojo. ",page:"10",url:"",level:"2",children:[]},{caption:"Abrir el archivo en conflicto:​Accedé al archivo en conflicto por medio de tu editor de código preferido. Git va a marcar las áreas en conflicto de esta forma:​​<<<<<<< HEAD ",page:"10",url:"",level:"2",children:[]},{caption:"Código en tu rama actual ",page:"10",url:"",level:"2",children:[]},{caption:"======= ",page:"10",url:"",level:"2",children:[]},{caption:"Código en la otra rama ",page:"10",url:"",level:"2",children:[]},{caption:">>>>>> nombre-de-la-rama ",page:"10",url:"",level:"2",children:[]},{caption:"Todo lo que está entre <<<<<<< HEAD y ======= es tu código. Lo que está entre ======= y >>>>>>> nombre-de-la-rama es el código de la otra rama. ",page:"10",url:"",level:"2",children:[]},{caption:"Resolver el conflicto:​Tenés que elegir qué código querés mantener. Podés optar por una de las versiones o hacer una mezcla de ambas. Una vez que decidas, eliminás las marcas (<<<<<<<, =======, >>>>>>>) y dejás el código como corresponde. ",page:"10",url:"",level:"2",children:[]},{caption:"Agregar el archivo resuelto:​Una vez resuelto el conflicto, volvés a agregar el archivo al staging area:​​git add nombre-del-archivo ",page:"10",url:"",level:"2",children:[]},{caption:"Hacer un commit:​Luego de agregar el archivo, hacés un commit que indique que resolviste el conflicto:​​git commit -m \"Conflicto resuelto\" ",page:"11",url:"",level:"2",children:[]},{caption:"Continuar con el flujo:​Después de resolver el conflicto y hacer el commit, podés continuar con el flujo de trabajo normal (push, merge, etc.). ",page:"11",url:"",level:"2",children:[]},{caption:"Usar Git con GitHub Desktop y Visual Studio Code ",page:"11",url:"",level:"2",children:[]},{caption:"Aunque podés trabajar con Git desde la terminal, existen herramientas que te harán muchísimo más sencillas tus tareas, como GitHub Desktop y Visual Studio Code. ",page:"11",url:"",level:"2",children:[]},{caption:"GitHub Desktop es una aplicación con interfaz gráfica que te permite gestionar tus repositorios de Git sin necesidad de usar la terminal. Es ideal para quienes están empezando con Git o prefieren una experiencia más visual. Recordá que usar GitHub Desktop es opcional, y muchas personas no lo utilizan, prefiriendo directamente utilizar la consola y las líneas de comando para trabajar ",page:"11",url:"",level:"2",children:[]},{caption:"Ventajas: ",page:"11",url:"",level:"2",children:[]},{caption:"●​Interfaz sencilla e intuitiva. ",page:"11",url:"",level:"2",children:[]},{caption:"●​Permite gestionar commits, ramas y merges en pocos pasos. ",page:"11",url:"",level:"2",children:[]},{caption:"●​Te muestra las diferencias entre versiones de manera visual. ",page:"11",url:"",level:"2",children:[]},{caption:"¿Cómo usarlo?: ",page:"11",url:"",level:"2",children:[]},{caption:"1.​Descargar GitHub Desktop desde desktop.github.com. ",page:"11",url:"",level:"2",children:[]},{caption:"2.​Clonar un repositorio: Podés clonar un repositorio existente o crear uno nuevo directamente desde la app. ",page:"11",url:"",level:"2",children:[]},{caption:"3.​Hacer commits y push: Cada vez que modifiques algo en tu proyecto, podés hacer commits y enviar esos cambios a GitHub sin necesidad de abrir la terminal. ",page:"11",url:"",level:"2",children:[{caption:"Visual Studio Code (VS Code) ",page:"11",url:"",level:"3",children:[]}]},{caption:"Visual Studio Code es un editor de código que tiene integración nativa con Git. Te permite ver los cambios, hacer commits y resolver conflictos directamente desde la interfaz del editor. ",page:"11",url:"",level:"2",children:[]},{caption:"Ventajas: ",page:"11",url:"",level:"2",children:[]},{caption:"●​Podés hacer todo sin salir del editor de código. ",page:"11",url:"",level:"2",children:[]},{caption:"●​Muestra claramente los cambios hechos en cada archivo. ",page:"11",url:"",level:"2",children:[]},{caption:"●​Facilita la resolución de conflictos visualmente. ",page:"11",url:"",level:"2",children:[]},{caption:" ",page:"11",url:"",level:"2",children:[]},{caption:"¿Cómo usarlo?: ",page:"12",url:"",level:"2",children:[]},{caption:"1.​Abrí tu proyecto en VS Code. ",page:"12",url:"",level:"2",children:[]},{caption:"2.​Usá la barra lateral de Git: Hacé clic en el ícono de Source Control en la barra lateral para ver los cambios, hacer commits y sincronizar con GitHub. ",page:"12",url:"",level:"2",children:[]},{caption:"3.​Sincronización con GitHub: Podés conectarte con tu cuenta de GitHub y gestionar repositorios remotos directamente desde VS Code. ",page:"12",url:"",level:"2",children:[]},{caption:"Con esto, cerramos el tema de Git y GitHub, que es esencial para gestionar proyectos y trabajar en equipo de manera eficiente. Recordá que usar Git bien desde el principio te ahorra dolores de cabeza en el futuro, ¡así que a practicar! ",page:"12",url:"",level:"2",children:[]},{caption:" ",page:"12",url:"",level:"2",children:[]},{caption:"Ejercicio 1: Crear una nueva rama en Git ",page:"12",url:"",level:"2",children:[]}]}];