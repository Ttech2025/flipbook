var ols=[{caption:"1. Introducción a las Funciones ",page:"3",url:"",level:"1",children:[]},{caption:"2. Parámetros de Entrada y Salida en Funciones ",page:"4",url:"",level:"1",children:[{caption:"Cuando hablamos de funciones, no solo nos referimos a bloques de código que hacen algo, sino que también pueden recibir información y devolver resultados. Acá es donde entran en juego los parámetros y los argumentos. Entender cómo funcionan es clave para aprovechar todo el potencial de las funciones. ",page:"4",url:"",level:"2",children:[{caption:"Definición de Parámetros ",page:"4",url:"",level:"3",children:[]}]},{caption:"Los parámetros son las \"variables\" que las funciones reciben al ser llamadas. Se definen cuando se crea la función y representan los datos que la función necesita para operar. Es como cuando le pedís a alguien que te alcance algo, y ese \"algo\" sería el parámetro. ",page:"4",url:"",level:"2",children:[]},{caption:"function saludar(nombre) { ",page:"4",url:"",level:"2",children:[]},{caption:"   console.log(\"Hola \" + nombre);} ",page:"4",url:"",level:"2",children:[]},{caption:"En este ejemplo, nombre es el parámetro de la función. Cuando la llamás, tenés que pasarle un argumento, que es el valor específico que querés usar: ",page:"4",url:"",level:"2",children:[]},{caption:"saludar(\"Juan\"); // Esto imprimirá \"Hola Juan\" ",page:"4",url:"",level:"2",children:[{caption:"Tipos de Funciones Según los Parámetros ",page:"4",url:"",level:"3",children:[]}]},{caption:"Sin Parámetros: Una función que no recibe ningún dato. Simplemente realiza una tarea y no necesita ninguna información externa.​​function saludar() { ",page:"4",url:"",level:"2",children:[]},{caption:"   console.log(\"Hola a todos\"); ",page:"4",url:"",level:"2",children:[]},{caption:"} ",page:"4",url:"",level:"2",children:[]},{caption:"saludar();  // Imprime: \"Hola a todos\" ",page:"4",url:"",level:"2",children:[]},{caption:"Con Parámetros: Estas funciones son más flexibles porque pueden trabajar con diferentes datos dependiendo de los argumentos que les pases.​​function sumar(a, b) { ",page:"4",url:"",level:"2",children:[]},{caption:"   console.log(a + b); ",page:"4",url:"",level:"2",children:[]},{caption:"} ",page:"4",url:"",level:"2",children:[]},{caption:"sumar(5, 10);  // Imprime: 15 ",page:"5",url:"",level:"2",children:[]},{caption:"En este segundo caso, la función sumar tiene dos parámetros (a y b) que, cuando la llamamos, se reemplazan con los valores 5 y 10. ",page:"5",url:"",level:"2",children:[]}]},{caption:"2. Argumentos: ¿Qué son y cómo funciona? ",page:"5",url:"",level:"1",children:[{caption:"Cuando llamamos a una función y le pasamos datos, esos datos se conocen como argumentos. Los argumentos son los valores reales que pasás a los parámetros de la función. Si pensás en los parámetros como un recipiente, los argumentos son lo que llenan ese recipiente. ",page:"5",url:"",level:"2",children:[]},{caption:"function multiplicar(a, b) { ",page:"5",url:"",level:"2",children:[]},{caption:"   return a * b; ",page:"5",url:"",level:"2",children:[]},{caption:"} ",page:"5",url:"",level:"2",children:[]},{caption:"console.log(multiplicar(3, 4)); // Imprime: 12 ",page:"5",url:"",level:"2",children:[]},{caption:"Acá, 3 y 4 son los argumentos que reemplazan a a y b en la función. Al final, el resultado es 3 * 4, que es 12. ",page:"5",url:"",level:"2",children:[{caption:"Ejemplos con Múltiples Argumentos ",page:"5",url:"",level:"3",children:[]}]},{caption:"Las funciones pueden recibir varios argumentos, y podés usarlos dentro de la función de la manera que prefieras. A continuación te doy un ejemplo más avanzado: ",page:"5",url:"",level:"2",children:[]},{caption:"function presentar(nombre, edad, ciudad) { ",page:"5",url:"",level:"2",children:[]},{caption:"   console.log(nombre + \" tiene \" + edad + \" años y vive en \" + ciudad + \".\"); ",page:"5",url:"",level:"2",children:[]},{caption:"} ",page:"5",url:"",level:"2",children:[]},{caption:"presentar(\"Juan\", 25, \"Buenos Aires\"); ",page:"5",url:"",level:"2",children:[]},{caption:"// Imprime: \"Juan tiene 25 años y vive en Buenos Aires.\" ",page:"5",url:"",level:"2",children:[]}]},{caption:"3. Scope Global y Local en Funciones ",page:"6",url:"",level:"1",children:[{caption:"Uno de los conceptos más importantes a la hora de trabajar con funciones es el alcance o scope. Este define dónde y cuándo una variable es accesible dentro del código. Hay dos tipos principales: global y local. ",page:"6",url:"",level:"2",children:[{caption:"Scope Global ",page:"6",url:"",level:"3",children:[]}]},{caption:"Una variable con scope global es aquella que podés usar en cualquier parte del programa, incluso dentro de funciones. Las variables globales se declaran fuera de cualquier función. ",page:"6",url:"",level:"2",children:[]},{caption:"let nombre = \"Pedro\"; ",page:"6",url:"",level:"2",children:[]},{caption:"function saludar() { ",page:"6",url:"",level:"2",children:[]},{caption:"  console.log(\"Hola \" + nombre); ",page:"6",url:"",level:"2",children:[]},{caption:"} ",page:"6",url:"",level:"2",children:[]},{caption:"saludar(); // Accede a la variable global 'nombre' y muestra: \"Hola Pedro\" ",page:"6",url:"",level:"2",children:[{caption:"Scope Local ",page:"6",url:"",level:"3",children:[]}]},{caption:"Una variable con scope local es aquella que solo existe dentro de una función. No se puede acceder a ella desde fuera de esa función. ",page:"6",url:"",level:"2",children:[]},{caption:"function saludar() { ",page:"6",url:"",level:"2",children:[]},{caption:"   let nombre = \"Maria\"; ",page:"6",url:"",level:"2",children:[]},{caption:"   console.log(\"Hola \" + nombre); ",page:"6",url:"",level:"2",children:[]},{caption:"} ",page:"6",url:"",level:"2",children:[]},{caption:"saludar();  // Imprime: \"Hola Maria\" ",page:"6",url:"",level:"2",children:[]},{caption:"console.log(nombre);  // Error, 'nombre' no está definida fuera de la función ",page:"7",url:"",level:"2",children:[{caption:"Diferencias entre Scope Global y Local ",page:"7",url:"",level:"3",children:[]}]},{caption:"El scope global puede ser peligroso si no lo manejás bien, porque cualquier función o parte del programa puede modificar una variable global. Por eso, siempre es recomendable limitar el uso de variables globales y trabajar más con variables locales. ",page:"7",url:"",level:"2",children:[]}]},{caption:"4. Programación Modular vs. Funciones ",page:"7",url:"",level:"1",children:[{caption:"En la programación, siempre es importante que el código sea modular. Esto significa dividir el código en bloques más pequeños, independientes y reutilizables. Las funciones son la base de esta modularidad. A través de ellas, podés organizar tu código de una manera más clara y ordenada, donde cada función se ocupa de una tarea específica. ",page:"7",url:"",level:"2",children:[{caption:"¿Qué es la Programación Modular? ",page:"7",url:"",level:"3",children:[]}]},{caption:"La programación modular es un enfoque que consiste en dividir el código en módulos o partes pequeñas, cada una con una responsabilidad clara. Esto facilita el mantenimiento y reutilización del código. En JavaScript, las funciones son los módulos básicos. ",page:"7",url:"",level:"2",children:[{caption:"Ventajas de la Programación Modular ",page:"7",url:"",level:"3",children:[]}]},{caption:"1.​Mantenimiento Simplificado: si necesitás cambiar algo, solo modificás una función en lugar de todo el programa. ",page:"7",url:"",level:"2",children:[]},{caption:"2.​Reutilización: podés usar las mismas funciones en diferentes partes de tu código sin necesidad de reescribirlas. ",page:"7",url:"",level:"2",children:[]},{caption:"3.​Legibilidad: el código se vuelve más fácil de leer, ya que cada función tiene un propósito claro. ",page:"7",url:"",level:"2",children:[]},{caption:"Ejemplo de programación modular: ",page:"7",url:"",level:"2",children:[]},{caption:"function calcularAreaRectangulo(base, altura) { ",page:"7",url:"",level:"2",children:[]},{caption:"   return base * altura;} ",page:"8",url:"",level:"2",children:[]},{caption:"function imprimirResultado(area) { ",page:"8",url:"",level:"2",children:[]},{caption:"   console.log(\"El área del rectángulo es: \" + area); ",page:"8",url:"",level:"2",children:[]},{caption:"} ",page:"8",url:"",level:"2",children:[]},{caption:"let base = 5; ",page:"8",url:"",level:"2",children:[]},{caption:"let altura = 10; ",page:"8",url:"",level:"2",children:[]},{caption:"let area = calcularAreaRectangulo(base, altura); ",page:"8",url:"",level:"2",children:[]},{caption:"imprimirResultado(area); ",page:"8",url:"",level:"2",children:[]},{caption:"Acá, cada función tiene una tarea específica: una calcula el área y otra imprime el resultado. Este enfoque hace que el código sea mucho más fácil de manejar. ",page:"8",url:"",level:"2",children:[]}]},{caption:"5. Funciones Nativas de JavaScript ",page:"8",url:"",level:"1",children:[{caption:"¿Qué son las funciones nativas? ",page:"8",url:"",level:"2",children:[]},{caption:"Ejemplos de funciones nativas útiles en el día a día: ",page:"8",url:"",level:"2",children:[]},{caption:"¿Por qué usar funciones nativas? ",page:"10",url:"",level:"2",children:[]},{caption:"Ejemplos prácticos de uso ",page:"11",url:"",level:"2",children:[]},{caption:"Comparación entre Funciones y Programación Modular ",page:"11",url:"",level:"2",children:[{caption:"Diferencias clave ",page:"11",url:"",level:"3",children:[]}]},{caption:"¿Cuándo usar una sobre la otra? ",page:"12",url:"",level:"2",children:[]}]},{caption:"Ejemplo práctico: Proyecto que combina programación modular y funciones ",page:"12",url:"",level:"1",children:[]},{caption:"¡Funciones y Modulaciones!  ",page:"13",url:"",level:"1",children:[{caption:"Calculadora Modular con Funciones ",page:"14",url:"",level:"2",children:[]}]},{caption:" ",page:"14",url:"",level:"1",children:[{caption:"Generación y visualización de productos con formato JSON ",page:"15",url:"",level:"2",children:[]}]}];